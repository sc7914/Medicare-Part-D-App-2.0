# -*- coding: utf-8 -*-
"""Copy of Medicare_Part_D_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-JX4bOTkTrMIqqPcSL_pIDc4KvDO2iGW
"""

import requests

size = 5000 # max supported by the API (see docs)
offset = 0 # start with first data

all_records = []

while True:
    request_url = f"https://data.cms.gov/data-api/v1/dataset/7e0b4365-fd63-4a29-8f5e-e0ac9f66a81b/data?size={size}&offset={offset}"
    response = requests.get(request_url)
    data = response.json()

    if not data:
        break

    all_records.extend(data)
    offset += size

from pandas import DataFrame

all_df = DataFrame(all_records)
all_df.index.name = "Row Number"

#AbbVie Data

#call dataset for AbbVie
all_df[all_df["Mftr_Name"].str.contains("Abbvie")]

#show only certain columns
columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

# Show only the selected columns for AbbVie
ABBV_data = all_df[all_df["Mftr_Name"].str.contains("Abbvie")][columns_to_show]

# Display the result
ABBV_data

all_df[all_df["Mftr_Name"].str.contains("Pfizer")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

PFE_data = all_df[all_df["Mftr_Name"].str.contains("Pfizer")][columns_to_show]

PFE_data

all_df[all_df["Mftr_Name"].str.contains("Lilly")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

LLY_data = all_df[all_df["Mftr_Name"].str.contains("Lilly")][columns_to_show]

LLY_data

all_df[all_df["Mftr_Name"].str.contains("Merck")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

MRK_data = all_df[all_df["Mftr_Name"].str.contains("Merck")][columns_to_show]

MRK_data

all_df[all_df["Mftr_Name"].str.contains("Gilead")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

GILD_data = all_df[all_df["Mftr_Name"].str.contains("Gilead")][columns_to_show]

GILD_data

all_df[all_df["Mftr_Name"].str.contains("Janssen")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

JNJ_data = all_df[all_df["Mftr_Name"].str.contains("Janssen")][columns_to_show]

JNJ_data

all_df[all_df["Mftr_Name"].str.contains("Glaxo")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

GSK_data = all_df[all_df["Mftr_Name"].str.contains("Glaxo")][columns_to_show]

GSK_data

all_df[all_df["Mftr_Name"].str.contains("Sanofi")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

SNY_data = all_df[all_df["Mftr_Name"].str.contains("Sanofi")][columns_to_show]

SNY_data

all_df[all_df["Mftr_Name"].str.contains("Roche")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

RHHBY_data = all_df[all_df["Mftr_Name"].str.contains("Roche")][columns_to_show]

RHHBY_data

all_df[all_df["Mftr_Name"].str.contains("Novartis")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

NVS_data = all_df[all_df["Mftr_Name"].str.contains("Novartis")][columns_to_show]

NVS_data

all_df[all_df["Mftr_Name"].str.contains("Novo")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

NOVO_data = all_df[all_df["Mftr_Name"].str.contains("Novo")][columns_to_show]

NOVO_data

all_df[all_df["Mftr_Name"].str.contains("Astra")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

AZN_data = all_df[all_df["Mftr_Name"].str.contains("Astra")][columns_to_show]

AZN_data

all_df[all_df["Mftr_Name"].str.contains("BMS")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

BMY_data = all_df[all_df["Mftr_Name"].str.contains("BMS")][columns_to_show]

BMY_data

all_df[all_df["Mftr_Name"].str.contains("Amgen")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

AMGN_data = all_df[all_df["Mftr_Name"].str.contains("Amgen")][columns_to_show]

AMGN_data

all_df[all_df["Mftr_Name"].str.contains("Biogen")]

columns_to_show = ["Brnd_Name", "Gnrc_Name", "Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]

BIIB_data = all_df[all_df["Mftr_Name"].str.contains("Biogen")][columns_to_show]

BIIB_data

# Dictionary of company dataframes
company_data = {
    "ABBV": ABBV_data,
    "PFE": PFE_data,
    "LLY": LLY_data,
    "MRK": MRK_data,
    "GILD": GILD_data,
    "JNJ": JNJ_data,
    "GSK": GSK_data,
    "SNY": SNY_data,
    "RHHBY": RHHBY_data,
    "NVS": NVS_data,
    "NOVO": NOVO_data,
    "AZN": AZN_data,
    "BMY": BMY_data,
    "AMGN": AMGN_data,
    "BIIB": BIIB_data
}

# Display valid input options
print("Valid company keys:")
for key in company_data.keys():
    print(key)
print("-----------------------")

# Get input from the user
company_key = input("Enter the company key (e.g., ABBV, PFE): ")

if company_key in company_data:
    selected_data = company_data[company_key]
    # Format output data as a table
    from IPython.display import display, HTML
    display(HTML(selected_data.to_html()))
else:
    print("Invalid company key.")

company_key = input("Enter the company key (e.g., ABBV, PFE): ")

if company_key in company_data:
    selected_data = company_data[company_key]
    for year in range(2018, 2023):
        column_name = f"Tot_Spndng_{year}"
        yearly_spending = sum(float(x) for x in selected_data[column_name] if x)
        formatted_spending = '{:,}'.format(round(yearly_spending))
        print(f"{company_key} spending in {year}: {formatted_spending}")
        print("--------------")
else:
    print("Invalid company key.")

import plotly.graph_objects as go
import pandas as pd

# Dictionary of company dataframes
company_data = {
    "ABBV": ABBV_data,
    "PFE": PFE_data,
    # ... other companies
}

# Display valid input options
print("Valid company keys:")
for key in company_data.keys():
    print(key)
print("-----------------------")

# Get input from the user
company_key = input("Enter the company key (e.g., ABBV, PFE): ")

if company_key in company_data:
    selected_data = company_data[company_key]

    # Convert spending columns to numeric, handling non-numeric values
    for year in range(2018, 2023):
        column_name = f"Tot_Spndng_{year}"
        selected_data[column_name] = pd.to_numeric(selected_data[column_name], errors='coerce')

    # Calculate total spending
    total_spending = selected_data[["Tot_Spndng_2018", "Tot_Spndng_2019", "Tot_Spndng_2020", "Tot_Spndng_2021", "Tot_Spndng_2022"]].sum().sum()
    formatted_total = '{:,}'.format(round(total_spending))
    print(f"Total Spending for {company_key}: {formatted_total}")
    print("--------------")

    # Iterate over the years and store the sums in a list
    yearly_spendings = []
    for year in range(2018, 2023):
        column_name = f"Tot_Spndng_{year}"
        yearly_spending = selected_data[column_name].sum()
        yearly_spendings.append(round(yearly_spending))

 # Create a bar chart using Plotly
    years = list(range(2018, 2023)) # Convert range object to a list
    fig = go.Figure(data=[go.Bar(x=years, y=yearly_spendings)])
    fig.update_layout(
        title=f"Yearly Spending for {company_key}",
        xaxis_title="Year",
        yaxis_title="Total Spending ($USD)"
    )
    fig.show()

else:
    print("Invalid company key.")
